# This file contains common pin mappings for the BIGTREETECH Manta M4P
# To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

#  Manta 系列主板搭配 CB1 使用时，40 Pin GPIO 为自定义的 IO 顺序，如下图所示，Pin 7 引脚是CB1 的"PC7"，Pin 11 引脚是 CB1 的"PC14"，CB1 的 gpio 编号对应关系为 (Px–PA)*32 + Pin
#         例如
#         PC7 = (PC–PA)*32 + 7 = 2 * 32 + 7 = 71
#         PH10 = (PH–PA)*32 + 10 = 7 * 32 + 10 = 234 

[stepper_x]
step_pin: PC15
dir_pin: PC14
enable_pin: !PC2
microsteps: 16
rotation_distance: 40
endstop_pin: ^!PB4
position_endstop: 0
position_max: 550
homing_speed: 100



[stepper_z1]
step_pin: PA1
dir_pin: !PA0
enable_pin: !PA2
microsteps: 16
rotation_distance: 8

[stepper_z]
step_pin: PA5
dir_pin: !PA4
enable_pin: !PA6
microsteps: 16
rotation_distance: 8
endstop_pin: ^!PD2
position_endstop: 0
position_max: 200
 

# [fan]
# pin: PD2

# [temperature_fan CB1_fan]
# pin: PD3
# sensor_type: temperature_host
# min_temp: 0
# max_temp: 70
# target_temp: 60
# control: pid                                                     
# pid_kp: 30
# pid_ki: 3
# pid_kd: 300



[mcu]
canbus_uuid: 3fc2e27633e8

[mcu CB1]
serial: /tmp/klipper_host_mcu

[printer]
kinematics: cartesian
max_velocity: 180
max_accel: 20000
max_z_velocity: 5
max_z_accel: 100

[virtual_sdcard]
path:~/printer_data/gcodes

[display_status]
[print_stats]

########################################
# EXP1 / EXP2 (display) pins
########################################

# [board_pins]
# aliases:
#     # EXP1 header
#     EXP1_1=PD6,  EXP1_3=PB9,  EXP1_5=PA15, EXP1_7=PA9,   EXP1_9=<GND>,
#     EXP1_2=PB8,  EXP1_4=PC3,  EXP1_6=PA10, EXP1_8=PB5,   EXP1_10=<5V>,
#     # EXP2 header
#     EXP2_1=PB14, EXP2_3=PC11, EXP2_5=PC12, EXP2_7=PC13,  EXP2_9=<GND>,
#     EXP2_2=PB13, EXP2_4=PA8,  EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
uart_pin: PC13
run_current: 0.7
sense_resistor: 0.110
diag_pin: 


[tmc2209 stepper_z1]
uart_pin: PC3
run_current: 0.7
sense_resistor: 0.110
diag_pin: 


[tmc2209 stepper_z]
uart_pin: PA3
run_current: 0.7
sense_resistor: 0.110
diag_pin: 

##########################################
#-----------   MACROS   ------------------
##########################################
[respond]

[pause_resume]

# [gcode_macro SET_PERCENT]
# gcode:
#   M117 Now at { params.VALUE|float * 100 }%

[inkjet]

[xaar1003]

[delayed_gcode DelayCleanNozzle]
initial_duration:0
gcode:
  HEAD_DISABLE 
  G4 P1000 
  PRINT_INIT  
  LOAD_CONFIG PATH=NozzleClean/config.txt
  LOAD_PRINT_DATA PATH=NozzleClean/data.txt
  G4 P5000 
  JET_ENABLE  
  G4 P10000 
  JET_DISABLE 
  G4 P1000 
  HEAD_DISABLE 
  RESPOND PREFIX="info:" MSG="Nozzle Cleaned."
  UPDATE_DELAYED_GCODE ID=DelayCleanNozzle DURATION=600
  
[gcode_macro SET_SCHEDULED_CLEAN]
gcode:
  UPDATE_DELAYED_GCODE ID=DelayCleanNozzle DURATION={params.TIME}

[gcode_macro TEST]
gcode:
  {% set wipe_count = 8 %}
  {% for wipe in range(wipe_count) %}
    { action_respond_info("Calling probe on" ) }
    RESPOND PREFIX="info:" MSG="This is a message from the macro"
  {% endfor %}


[gcode_macro print_loop]
gcode:
  {% set times = 30 %}
  {% for i in range(times) %}
    G1 x120 F10000 
    M400 
    G1 x520 F625 
    JET_ENABLE  
    M400 
    JET_DISABLE 
    LOAD_PRINT_DATA PATH=test/data.txt
    G91
    G1 z-0.05 F600 
    G90 
  {% endfor %}



########################################
# printer control configuration
########################################



[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
    PAUSE_BASE

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
    RESUME_BASE

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
